🔧 Zasady działania programu:
Masz 2 stosy: a i b.

Na początku:
stos a zawiera losową liczbę unikalnych liczb całkowitych (mogą być ujemne i dodatnie),

stos b jest pusty.

Celem jest:
Posortować liczby rosnąco w stosie a.

Masz do dyspozycji tylko następujące operacje:

Instrukcja	Opis
sa	Zamienia miejscami dwa pierwsze elementy stosu a.
sb	Zamienia miejscami dwa pierwsze elementy stosu b.
ss	sa i sb jednocześnie.
pa	Przenosi pierwszy element ze stosu b na szczyt stosu a.
pb	Przenosi pierwszy element ze stosu a na szczyt stosu b.
ra	Przesuwa wszystkie elementy w a o 1 w górę (pierwszy idzie na koniec).
rb	To samo dla b.
rr	ra i rb jednocześnie.
rra	Przesuwa wszystko w a o 1 w dół (ostatni idzie na początek).
rrb	To samo dla b.
rrr	rra i rrb jednocześnie.

✅ Twój program musi spełniać następujące zasady:
Musisz oddać Makefile, który kompiluje pliki źródłowe. Nie może robić relinkowania.

Nie wolno używać zmiennych globalnych.

Program push_swap przyjmuje jako argumenty liczby do posortowania (czyli stos a).

Pierwszy argument to góra stosu (zwróć uwagę na kolejność!).

Program wypisuje najkrótszy możliwy zestaw instrukcji, które posortują liczby w a (najmniejsza liczba na górze).

Każda instrukcja w osobnej linii (\n). Nic więcej.

Liczy się minimalna liczba operacji.

Jeśli nie podasz żadnych argumentów – nie wypisuje nic.

Jeśli wystąpi błąd, wypisz: "Error\n" na stderr.
Przykłady błędów:

argument nie jest liczbą całkowitą,

liczba nie mieści się w zakresie typu int,

duplikaty.

🔍 Sprawdzanie działania:
Będzie używany specjalny program checker_OS, który sprawdzi, czy Twój program naprawdę sortuje liczby.

Przykład działania:

bash
Copy
Edit
ARG="4 67 3 87 23"
./push_swap $ARG | wc -l        # liczy liczbę operacji
6

./push_swap $ARG | ./checker_OS $ARG
OK                                # jeśli wszystko poprawnie posortowane
Jeśli checker_OS wypisze "KO", oznacza to, że Twoje instrukcje nie posortowały liczb.

🧪 Benchmark (testy wydajności):
Aby Twój projekt został zaliczony:

Dla 100 losowych liczb, liczba operacji musi być mniejsza niż 700.
(minimum 80 punktów)

Aby dostać maksymalną ocenę i móc robić bonusy:

dla 500 liczb, musi być poniżej 5500 operacji.

Podsumowanie:
Musisz napisać program w C, który:

bierze listę liczb,

używa tylko dozwolonych operacji,

generuje najkrótszą możliwą sekwencję instrukcji, która je posortuje w stosie a.


