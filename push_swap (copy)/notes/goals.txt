ğŸ“… DzieÅ„ 1 â€“ 16 czerwca (poniedziaÅ‚ek)
CEL: Zrozumienie podstaw + struktury danych + parsowanie argumentÃ³w

 Przeczytaj jeszcze raz zasady dziaÅ‚ania projektu (co dokÅ‚adnie masz zrobiÄ‡).

 Naucz siÄ™ i zapisz sobie zasady dziaÅ‚ania stosÃ³w (a, b) i wszystkich operacji (sa, sb, pa, pb...).

 ZrÃ³b struktury danych:

struktura stosu (np. lista jednokierunkowa albo tablica),

struktura do przechowywania danych wejÅ›ciowych.

 Zaimplementuj parsowanie argumentÃ³w wejÅ›ciowych:

sprawdÅº poprawnoÅ›Ä‡ (czy to int, brak duplikatÃ³w, zakres int),

wypisz "Error\n" w przypadku bÅ‚Ä™du (na stderr).

 Przechowuj liczby w kolejnoÅ›ci jako stos a.

ğŸ§  Po dzisiaj masz gotowe wczytywanie i struktury â€“ moÅ¼esz wyÅ›wietlaÄ‡ stos.

ğŸ“… DzieÅ„ 2 â€“ 17 czerwca (wtorek)
CEL: Implementacja operacji i testowanie dziaÅ‚ania stosÃ³w

 Zaimplementuj wszystkie operacje (sa, sb, ss, pa, pb, ra, rb, rr, rra, rrb, rrr).

 ZrÃ³b funkcjÄ™ print_stack() do debugowania.

 Napisz mini program testowy â€“ np. wrzuÄ‡ rÄ™cznie dane i zobacz, jak operacje zmieniajÄ… stosy.

 Upewnij siÄ™, Å¼e Twoje operacje sÄ… poprawne logicznie (np. sa zamienia tylko 2 pierwsze elementy).

ğŸ§  Po dzisiaj masz peÅ‚nÄ… manipulacjÄ™ stosami.

ğŸ“… DzieÅ„ 3 â€“ 18 czerwca (Å›roda)
CEL: Strategia sortowania â€“ od maÅ‚ych liczb

 Zacznij od najprostszych przypadkÃ³w:

 sortowanie 2 liczb,

 sortowanie 3 liczb (tutaj jest kilka moÅ¼liwych przypadkÃ³w, ktÃ³re moÅ¼esz rozrÃ³Å¼niaÄ‡ warunkami).

 Dodaj obsÅ‚ugÄ™ sortowania maÅ‚ej iloÅ›ci danych.

 JeÅ›li masz czas: dodaj pb i pa, by mÃ³c wrzucaÄ‡ dane do b i z powrotem.

ğŸ§  Po dzisiaj sortujesz poprawnie do 3 liczb.

ğŸ“… DzieÅ„ 4 â€“ 19 czerwca (czwartek)
CEL: Sortowanie wiÄ™kszych zbiorÃ³w â€“ sortowanie indeksami

 ZrÃ³b funkcjÄ™, ktÃ³ra kaÅ¼dej liczbie przypisuje jej indeks w posortowanej tablicy.

 Implementuj algorytm radix sort na indeksach (efektywny przy duÅ¼ych liczbach).

 Testuj na 5â€“10â€“100 liczbach.

 Zapisuj operacje do stdout.

ğŸ§  Po dzisiaj masz peÅ‚ne sortowanie duÅ¼ych danych.

ğŸ“… DzieÅ„ 5 â€“ 20 czerwca (piÄ…tek)
CEL: Optymalizacja + testy z checkerem

 SprawdÅº, czy wszystko dziaÅ‚a z checker_OS.

 Testuj wydajnoÅ›Ä‡ (wc -l â€“ liczba operacji).

 Dopracuj strategie (np. lepsze sortowanie dla 5â€“20 liczb).

 SprawdÅº bÅ‚Ä™dy wejÅ›cia â€“ duplikaty, zÅ‚e argumenty.

ğŸ“… DzieÅ„ 6 â€“ 21 czerwca (sobota â€“ TYLKO JEÅšLI BARDZO TRZEBA)
CEL: Rezerwa + bonusy (jeÅ›li robisz)

 Dodaj bonusy (*_bonus.c/h, np. checker wÅ‚asny, visualizer).

 Finalne czyszczenie kodu, Makefile, norminette.

ğŸ“Œ NarzÄ™dzia, ktÃ³re warto przygotowaÄ‡:
print_stack() â€“ debugowanie stosÃ³w.

apply_op() â€“ funkcja, ktÃ³ra wykonuje operacjÄ™ po nazwie.

parse_input() â€“ konwersja argumentÃ³w.

is_sorted() â€“ sprawdza czy a jest posortowany.

free_all() â€“ czyszczenie pamiÄ™ci (waÅ¼ne na obronie).
